generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model answers {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  question_id BigInt?    @db.UnsignedBigInt
  hint        String?    @db.VarChar(255)
  value       String     @db.Text
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  questions   questions? @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "answers_question_id_foreign")

  @@index([question_id], map: "answers_question_id_foreign")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model choices {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  question_id BigInt?    @db.UnsignedBigInt
  values      String     @db.VarChar(255)
  is_correct  String     @db.VarChar(255)
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  questions   questions? @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "choices_question_id_foreign")

  @@index([question_id], map: "choices_question_id_foreign")
}

model exercises {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  title        String         @db.VarChar(255)
  part         exercises_part
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  deleted_at   DateTime?      @db.Timestamp(0)
  questions    questions[]
  user_records user_records[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model mails {
  id                              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  to_user_id                      BigInt    @db.UnsignedBigInt
  from_user_id                    BigInt    @db.UnsignedBigInt
  subject                         String    @db.VarChar(255)
  body                            String    @db.Text
  is_read                         Boolean   @default(false)
  created_at                      DateTime? @db.Timestamp(0)
  updated_at                      DateTime? @db.Timestamp(0)
  users_mails_from_user_idTousers users     @relation("mails_from_user_idTousers", fields: [from_user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mails_from_user_id_foreign")
  users_mails_to_user_idTousers   users     @relation("mails_to_user_idTousers", fields: [to_user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "mails_to_user_id_foreign")

  @@index([from_user_id], map: "mails_from_user_id_foreign")
  @@index([to_user_id], map: "mails_to_user_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model questions {
  id                 BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  exercise_id        BigInt?    @db.UnsignedBigInt
  prompt             String     @db.Text
  before_prompt      String?    @db.VarChar(255)
  after_prompt       String?    @db.VarChar(255)
  is_multiple_choice Boolean    @default(false)
  created_at         DateTime?  @db.Timestamp(0)
  updated_at         DateTime?  @db.Timestamp(0)
  answers            answers[]
  choices            choices[]
  exercises          exercises? @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "questions_exercise_id_foreign")

  @@index([exercise_id], map: "questions_exercise_id_foreign")
}

model schools {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  address    String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  phone      String    @db.VarChar(255)
  password   String    @db.VarChar(255)
  deleted_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model user_records {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  exercise_id BigInt    @db.UnsignedBigInt
  score       Int
  time_spent  Int
  timestamp   DateTime  @default(now()) @db.Timestamp(0)
  exercises   exercises @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_records_exercise_id_foreign")
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_records_user_id_foreign")

  @@index([exercise_id], map: "user_records_exercise_id_foreign")
  @@index([user_id], map: "user_records_user_id_foreign")
}

model users {
  id                              BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  password                        String?        @db.VarChar(255)
  name                            String         @db.VarChar(255)
  surname                         String         @db.VarChar(255)
  email                           String         @unique(map: "users_email_unique") @db.VarChar(255)
  school_id                       BigInt?        @db.UnsignedBigInt
  role                            users_role     @default(Student)
  email_verified_at               DateTime?      @db.Timestamp(0)
  set_exercise                    Int?
  deleted_at                      DateTime?      @db.Timestamp(0)
  remember_token                  String?        @db.VarChar(100)
  created_at                      DateTime?      @db.Timestamp(0)
  updated_at                      DateTime?      @db.Timestamp(0)
  mails_mails_from_user_idTousers mails[]        @relation("mails_from_user_idTousers")
  mails_mails_to_user_idTousers   mails[]        @relation("mails_to_user_idTousers")
  user_records                    user_records[]
  schools                         schools?       @relation(fields: [school_id], references: [id], onUpdate: Restrict, map: "users_school_id_foreign")

  @@index([school_id], map: "users_school_id_foreign")
}

enum exercises_part {
  ONE   @map("1")
  TWO   @map("2")
  THREE @map("3")
  FOUR  @map("4")
}

enum users_role {
  Admin
  Teacher
  Student
}
